#!/usr/bin/env ruby

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.



require_relative "tests"

def limit?(fib, l)
  fib >= l
end

def condition(numb)
  numb % 2 == 0
end

def calc_fib_next(fib_prev,fib_next)
    [fib_next, fib_next+fib_prev]
end

def even_sum(l)
  sum = 0
  fib_prev = 0
  fib_next = 1
  until limit?( fib_next, l )
    sum += fib_next if condition(fib_next)
    fib_prev, fib_next = calc_fib_next(fib_prev, fib_next)
  end
  sum
end

if ARGV.empty?
  assert( even_sum(2) == 0 )
  assert( even_sum(4) == 2 )
  assert( even_sum(6) == 2 )
  assert( even_sum(4_000_000) == 4613732 )
  puts
else
  puts even_sum(ARGV.first.to_i)
end




